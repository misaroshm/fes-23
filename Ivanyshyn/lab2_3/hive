import random
from cell import Cell
from config import Config
from bee import EmployedBee,  InspectorBee


class FoodQuality:
    cell: Cell
    quality: float

    def init(self, cell: Cell, quality: float) -> None:
        self.cell = cell
        self.quality = quality


class BeeAssignment:
    bee: EmployedBee
    cell: Cell

    def init(self, bee: EmployedBee, cell: Cell) -> None:
        self.bee = bee
        self.cell = cell


class Hive:
    """
    Implementation of a bee colony that collects food from a field.

    Classes:
        - FoodQuality: Represents the quality of the food gathered from a cell.
        - BeeAssignment: Represents a bee and the cell it is assigned to.
        - Hive: Represents the bee colony and contains the main logic of the simulation.

    Methods:
        - generate_field: Generates the field where the bees will gather food.
        - __generate_bees: Generates the employed and inspector bees.
        - __assign_bees_to_cells: Assigns employed bees to cells in the field.
        - __set_quality_to_cell: Sets the quality of the food gathered from a cell.
        - __pick_cell_to_fly: Picks a cell for a bee to fly to based on the quality of the food gathered so far.
        - run: Runs the simulation and outputs the cells picked by the bees,
        the food quality, and the total amount of food gathered.
    """
    __config: Config

    __food_gathered: float = 0
    __field: list[Cell]
    __picked_cells: list[Cell]
    __cells_quality_table: list[FoodQuality]
    __employed_bees: list[EmployedBee]
    __inspector_bee: InspectorBee

    def __init(self, config: Config) -> None:
        self.__config = config

        self.__generate_field(self.__config.FIELD_WIDTH, self.__config.FIELD_HEIGHT)
        self.__generate_bees()

    def run(self) -> None:
        while True:
            bee_assignments: list[BeeAssignment] = self.__assign_bees_to_cells()

            for i in range(len(bee_assignments)):
                assignment: BeeAssignment = bee_assignments[i]

                if assignment.cell is None:
                    print('All sources are gathered')
                    return

                print(f'Number of bee is {i+1}. '
                    f'Picked cell is ({assignment.cell.x}, {assignment.cell.y}), val = {assignment.cell.val}, '
                    f'max_load = {assignment.cell.max_load}')

            for i in range(len(bee_assignments)):
                assignment: BeeAssignment = bee_assignments[i]

                try:
                    assignment.bee.fly(assignment.cell)
                    assignment.bee.gather()
                except ValueError as err:
                    print(err)

            for i in range(len(bee_assignments)):
                assignment: BeeAssignment = bee_assignments[i]

                food_gathered_by_bee: int = assignment.bee.upload_food()
                self.__food_gathered += food_gathered_by_bee

                food_quality: float = self.__inspector_bee.check_src_quality(food_gathered_by_bee, assignment.cell)
                print(f'Quality =  {food_quality}')
                self.__set_quality_to_cell(assignment.cell, food_quality)

    def __generate_field(self, width: int, height: int) -> None:
        self.__field = []
        self.__cells_quality_table = []

        for h in range(height):
            for w in range(width):
                self.__field.append(Cell(w, h, random.randint(1, self.__config.EMPLOYED_AGENTS)))

        self.__picked_cells: list = random.sample(self.__field, self.__config.SOURCES)

        for i in range(len(self.__picked_cells)):
            field_cell: Cell = next((cell for cell in self.__field if
                                     cell.x == self.__picked_cells[i].x and cell.y == self.__picked_cells[i].y), None)
            field_cell.val = random.randint(self.__config.MAX_FIELD_CAPACITY / 2, self.__config.MAX_FIELD_CAPACITY)
            self.__cells_quality_table.append(FoodQuality(field_cell, float(0)))

    def __generate_bees(self) -> None:
        self.__employed_bees = []
